#+Title:	Requirements for mytimeout
#+author:	Neil Cherry <ncherry@linuxha.com>
#+date:		Jan. 13, 2021

* Purpose

Node-red-contrib-mytimeout is a countdown timer that can be trigged by sending it input. It will run until the timer runs out where it will turn off. It can be turned off, stopped or cancelled with the correct input. It can be 'tickled' (restarted) with an on message or any other command not listed below. Meaning, if you send it junk, you have tickled the timer to continue to run. You can dynamically change the timeout and warning values by sending the appropriate Javacript object to the input.

Node-red-contrib-mytimeout can send and receive to the same MQTT topic. If the input matches the previously sent output, the message is ignored to avoid an endless loop. But be careful, it the message sent is modified and is no matches the previous message sent, then the new message will be resent and loops will occur. This will cause node-red to become totally unresponsive.

* Requirement

1. node-red-contrib-mytimeout (mytimeout) is a countdown timer
2. mytimeout can be 'tickled' (restarted) with an on message or any other command not listed below. Meaning, if you send it junk, you have tickled the timer to continue to run.
   1. what about no payload, is that possible?
   2. Define 'junk'
   3. what are the exceptions?
3. You can dynamically change the timeout and warning values by sending the appropriate Javacript object to the input. This restarts mytimeout
4. mytimeout has 2 outputs, the command output and the ticks output
5. the commands output contains the commands issued by the timer (on/off/warn/stop/cancel(?) cancel maybe silent on cmds output)
6. the ticks output contains the running state of the timer and addition information
7. mytimeout is triggered by sending it an input, when turned on it will send an on-msg
   1. except when the payload is '' (blank), then the on-msg won't be sent but the timer will start. *Need a Note here*
8. mytimeout will run until the timer times out when it sends an off-msg (unless a stop or cancel message has been sent)
9. at a preset time a warn-msg will be sent (if set)
10. the timer can be turned off, stopped or cancelled and the appropriate message will be sent
11. Must be able to use the same topic to subscribe and publish on without resending the same message (positive feedback). If the input matches the previously sent commands output, the message is ignored to avoid an endless loop.
12. An empty Warning state payload entry (reword this) or warning seconds will cause mytimeout to skip sending the warning message
13. An empty Timer On payload will cause mytimeout to start/restart the time but not send the on command, mytimeout can still send the warning (if so set) and off commands. Ticks output will still occur.
14. Convert float values to int (round up, round down ???)

* Test cases

These are not unit tests, I haven't figured out who to write a unit test for this node-red node. These are node functionality / itegration test.

** Samples:
*** Basic

This is a standard minimal JSON object sent to mytimeout.  We can drop the _msgid, timeout and warning but in the sample I sent I minimized the amount of time a default node needs to run so I wouldn't have 31 lines in the ticks array.

**** node

This is the default mytimeout node used for testing. Since we need to set it up a 5/2 should work well enough.

#+begin_src js
{ id: "n1", type: "mytimeout",
  name:       nom,
  outsafe:    'on', /* If blank we should get no on msg */
  outwarning: "warning",
  outunsafe:  'off',
  timer:      5,
  warning:    2,
  wires:[["n2"], ["n3"]] },
#+end_src

**** sent

#+begin_src js
{"_msgid":"13828afd.df31c5","payload":"on","timeout":5,"warning":2}
#+end_src

**** cmnds

#+begin_src js
{"_msgid":"13828afd.df31c5","payload":"on","timeout":5,"warning":2,"topic":""}
{"_msgid":"13828afd.df31c5","payload":"Warning","timeout":5,"warning":2,"topic":""}
{"_msgid":"13828afd.df31c5","payload":"off","timeout":5,"warning":2,"topic":""}
#+end_src

**** ticks

#+begin_src js
{"payload":5,"state":1,"flag":"ticks > 0","_msgid":"8c50272c.e4dc78"}
{"payload":4,"state":1,"flag":"ticks > 0","_msgid":"2890a4cb.4571ec"}
{"payload":3,"state":1,"flag":"ticks > 0","_msgid":"6c60bd4c.d6a284"}
{"payload":2,"state":2,"flag":"warn >= ticks","_msgid":"523bfa12.4de134"}
{"payload":1,"state":2,"flag":"warn >= ticks","_msgid":"cefc13aa.cff88"}
{"payload":0,"state":0,"flag":"off","_msgid":"13828afd.df31c5"}
#+end_src

*** MQTT payload object as string

I often send HA commands from outside of node-red via MQTT topics. When doing this with mosquitto_pub I often need to send the JSON object in the payload. Mytimeout is programmed to read this string, search for the string payload anad convert the string to a JSON object.

**** node

This is the default mytimeout node used for testing. Since we need to set it up a 5/2 should work well enough.

#+begin_src js
{ id: "n1", type: "mytimeout",
  name:       nom,
  outsafe:    'on', /* If blank we should get no on msg */
  outwarning: "warning",
  outunsafe:  'off',
  timer:      5,
  warning:    2,
  wires:[["n2"], ["n3"]] },
#+end_src

**** sent

#+begin_src js
{"topic":"home/test/mytimeout", "payload":"{\"payload\": \"on\", \"timeout\": 6, \"TestNo\":\"0001\" }", "qos":0, "retain":false, "_msgid":"49d6f819.7b4eb8"}
#+end_src

**** cmnds

#+begin_src js
{"topic":"","payload":"on","qos":0,"retain":false,"_msgid":"49d6f819.7b4eb8","timeout":6,"TestNo":"0001"}
{"topic":"","payload":"Warning","qos":0,"retain":false,"_msgid":"49d6f819.7b4eb8","timeout":6,"TestNo":"0001"}
{"topic":"","payload":"off","qos":0,"retain":false,"_msgid":"49d6f819.7b4eb8","timeout":6,"TestNo":"0001"}
#+end_src

**** ticks

#+begin_src js
{"payload":6,"state":1,"flag":"ticks > 0","_msgid":"7b8be61f.17fbe8"}
{"payload":5,"state":2,"flag":"warn >= ticks","_msgid":"53e8025f.19fcfc"}
{"payload":4,"state":2,"flag":"warn >= ticks","_msgid":"72ded430.23362c"}
{"payload":3,"state":2,"flag":"warn >= ticks","_msgid":"11089b18.fb2435"}
{"payload":2,"state":2,"flag":"warn >= ticks","_msgid":"3a5000c1.a0b71"}
{"payload":1,"state":2,"flag":"warn >= ticks","_msgid":"5a02330c.d2220c"}
{"payload":0,"state":0,"flag":"off","_msgid":"49d6f819.7b4eb8"}
#+end_src

** mytimeout Node

Because this testing doesn't use the html config we need to add the defaults we want to use in the node setup

#+begin_src js
var flow = [
   { id: "n1", type: "mytimeout",
     name:       nom,
     outsafe:    'on', /* If blank we should get no on msg */
     outwarning: "warning",
     outunsafe:  'off',
     timer:      5,
     warning:    2,
     wires:[["n2"], ["n3"]] },
   { id: "n2", type: "helper" }, /* Output commands */
   { id: "n3", type: "helper" }  /* Output state of ticks */
];
#+end_src

Where n1 is the input to the node, n2 is the cmnds output, and n3 is the ticks output from the node.

*** [ ] - TC  0 - Load test

**** Test
- Tests that the module loads and that some attributes are set

**** Expected results

*** [ ] - TC  1 - Base test, send on

**** Test

- Run with default flow, test for on/warning/off, number of commands, number of ticks

**** Expected results

- 'on' in cmnds[0]
- 'warning' in cmnds[1]
- 'off' in cmnds[0]
- cmnds length of 3

- ticks[0] properties ...
- ticks[2] properties ...
- ticks[5] properties ...
- ticks length of 6 (?)

*** [ ] - TC  2 - Base test, send stop

**** Test
- x

**** Expected results
- x

*** [ ] - TC  3 - Base test, send cancel

**** Test
- x

**** Expected results
- x

*** [ ] - TC  4 - Test with empty payload '' and no warning msg


**** Test
- x

**** Expected results
- x

*** [ ] - TC  5 - Test with timeout override (integer)


**** Test
- x

**** Expected results
- x

*** [ ] - TC  6 - Test with short timeout override and extra attribute


**** Test
- x

**** Expected results
- x

*** [ ] - TC  7 - Test off


**** Test
- x

**** Expected results
- x

*** [ ] - TC  8 - Test off with 0


**** Test
- x

**** Expected results
- x

*** [ ] - TC  9 - Test stop


**** Test
- x

**** Expected results
- x

*** [ ] - TC 10 - Test on with no warning (warning value as an integer)


**** Test
- x

**** Expected results
- x

*** [ ] - TC 11 - Test on on (send an on, then send another on before the timer turns off)


**** Test
- x

**** Expected results
- x

*** [ ] - TC 12 - Test on/on with floats


**** Test
- x

**** Expected results
- x

*** [ ] - TC 13 - Test on with no warning (warning value as a string)


**** Test
- x

**** Expected results
- x

*** [ ] - TC 14 - Test with timeout override (string)


**** Test
- x

**** Expected results
- x

*** [ ] - TC 15 - Test with 'junk' payload, timeout 3, warning '0'

**** Test
- x

**** Expected results
- x

*** [ ] - TC 16 - Test on, on with payload = ''


**** Test
- x

**** Expected results
- x

*** [ ] - TC 17 - Test on/off


**** Test
- x

**** Expected results
- x

*** [ ] - TC 18 - Test on/stop


**** Test
- x

**** Expected results
- x

*** [ ] - TC 19 - Test on/cancel


**** Test
- x

**** Expected results
- x

*** [ ] - TC 20 - Test ON (ignore case test)


**** Test
- x

**** Expected results
- x

*** [ ] - TC 21 - Test Warning wih floats


**** Test
- x

**** Expected results
- x

*** [ ] - TC 22 - Should turn on/on, Tx on


**** Test
- x

**** Expected results
- x

*** [ ] - TC 23 - Should turn on/on (2nd no payload), Tx on


**** Test
- x

**** Expected results
- x

*** [ ] - TC 24 - Should turn on with junk, Tx junk (Test with 'junk' payload, timeout 3, warning '0')


**** Test
- x

**** Expected results
- x

*** [ ] - TC 25 - Should turn on with junk with no outwarning (''), Tx junk (Test with 'junk' payload, timeout 3, warning '0')


**** Test
- x

**** Expected results
- x

*** [ ] - TC 26 - Should turn on with junk with outwarning not defined & warning (0), Tx junk )Test with 'junk' payload, timeout 3, warning '0')

**** Test
- x

**** Expected results
- x

*** [ ] - TC 27 - Should turn on with junk with outwarning &warning defined, Tx junk & warning 0 (Test with 'junk' payload, timeout 3, warning '0')

**** Test
- x

**** Expected results
- x

*** [ ] - TC xx - *Need* additional test cases here


**** Test
- x

**** Expected results
- x

** mytimeout Node/MQTT flow test

*** [ ] - TC 01 - send on, same topic In/Out (full flow test w/mqtt)


**** Test
- x

**** Expected results
- x

*** [ ] - TC xx - *Need* additional test cases here


**** Test
- x

**** Expected results
- x

* Future requirements
1. add support for pause
2. add support for {{mustache}} in HTML config (see template core and testing code)
3. 

* Commands

- '0'      -
- '1'      -
- 'on'     -
- 'off'    -
- 'stop'   -
- 'cancel' -
- 'pause'  -
- junk     - really need to properly define this
- blank    - need to define this

* ticks format
** states
-  0 - timer not running (counted down, off, stop or cancel)
-  1 - timer running
-  2 - timer running, warning issued
-  3 - timer paused

** flags
- ticks > 0     - timer counting down
- warn >= ticks - timer counting down, warning issued
- off           - timer not running
- pause         - timer is pause
- stop          - timer not running (just a different reason) no off(?), tick information issued
- cancel        - timer not running, no off will be sent and ticks issued
- unknown       - Shouldn't happen, not code but there for future use

* Options
- Debug logging
- ignore payload case
- repeat (not used)
- again (not used)
- inverted logic (not yet implemented)

* -[ Fini ]------------------------------ ----------------------------------------
** Emacs Org-mode stuff
#+startup: overview+
#+startup: inlineimages
#+startup: indent
#+creator: Neil Cherry <ncherry@linuxha.com>

